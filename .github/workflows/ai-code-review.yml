name: BSQA Code Review AI

on:
  workflow_call:
    inputs:
      gist_url:
        required: true
        type: string
    secrets:
      STACKSPOT_CLIENT_ID:
        required: true
      STACKSPOT_CLIENT_SECRET:
        required: true
      STACKSPOT_AGENT_ID:
        required: true

permissions:
  contents: read
  pull-requests: write

jobs:
  ai-review:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: üîÑ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Gerando Diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD > diff.txt
          if [ ! -f diff.txt ] || [ ! -s diff.txt ]; then
            echo "No changes to review" > diff.txt
          fi

      - name: üìù Baixando Prompt do Gist
        run: |
          echo "üì• Baixando prompt template do Gist..."

          GIST_URL="${{ inputs.gist_url }}"
          
          curl -s --fail --max-time 30 "$GIST_URL" -o prompt_template.txt

          if [ ! -s prompt_template.txt ]; then
            echo "‚ùå Prompt vazio ou n√£o encontrado"
            exit 1
          fi

          echo "‚úÖ Prompt baixado com sucesso"
          echo "üìä Tamanho: $(wc -c < prompt_template.txt) bytes"
          echo "üìã Preview:"
          head -n 5 prompt_template.txt

      - name: üõ†Ô∏è Preparando Prompt Final
        run: |          
          {
            cat prompt_template.txt
            echo ""
            echo ""
            cat diff.txt
          } > prompt.txt
          
          echo "üìã Conte√∫do que ser√° enviado para code review AI:"
          echo "============================================"
          cat prompt.txt
          echo "============================================"

      - name: üîê Autentica√ß√£o StackSpot
        run: |
          
          TOKEN_RESPONSE=$(curl -s --fail --max-time 30 \
            --location 'https://idm.stackspot.com/stackspot-freemium/oidc/oauth/token' \
            --header 'Content-Type: application/x-www-form-urlencoded' \
            --data-urlencode "client_id=${{ secrets.STACKSPOT_CLIENT_ID }}" \
            --data-urlencode 'grant_type=client_credentials' \
            --data-urlencode "client_secret=${{ secrets.STACKSPOT_CLIENT_SECRET }}") || {
            echo "‚ùå Falha na autentica√ß√£o StackSpot"
            exit 1
          }
          
          if ! echo "$TOKEN_RESPONSE" | jq . > /dev/null 2>&1; then
            echo "‚ùå Resposta de autentica√ß√£o inv√°lida"
            exit 1
          fi
          
          if echo "$TOKEN_RESPONSE" | jq -e '.error' > /dev/null 2>&1; then
            ERROR=$(echo "$TOKEN_RESPONSE" | jq -r '.error_description // .error')
            echo "‚ùå Erro de autentica√ß√£o: $ERROR"
            exit 1
          fi
          
          ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
            echo "‚ùå Token n√£o encontrado na resposta"
            exit 1
          fi
          
          echo "::add-mask::$ACCESS_TOKEN"
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
          echo "‚úÖ Autentica√ß√£o bem-sucedida"

      - name: ü§ñ BSQA Code Review AI
        run: |
          
          PROMPT_CONTENT=$(cat prompt.txt)
          ESCAPED_PROMPT=$(printf '%s' "$PROMPT_CONTENT" | jq -Rs .)
          
          RESPONSE=$(curl -s -w "\n###STATUS###%{http_code}" \
            --max-time 60 \
            --location "https://genai-inference-app.stackspot.com/v1/agent/${{ secrets.STACKSPOT_AGENT_ID }}/chat" \
            --header 'Content-Type: application/json' \
            --header "Authorization: Bearer $ACCESS_TOKEN" \
            --data "{
              \"streaming\": false,
              \"user_prompt\": $ESCAPED_PROMPT,
              \"stackspot_knowledge\": false,
              \"return_ks_in_response\": false
            }")
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n 1 | sed 's/.*###STATUS###//')
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "‚ùå Erro na API (HTTP $HTTP_STATUS)"
            exit 1
          fi
          
          if ! echo "$RESPONSE_BODY" | jq . > /dev/null 2>&1; then
            echo "‚ùå Resposta do code review AI inv√°lida"
            exit 1
          fi
          
          REVIEW_OUTPUT=$(echo "$RESPONSE_BODY" | jq -r '.message // .output_text // empty')
          
          if [ -z "$REVIEW_OUTPUT" ] || [ "$REVIEW_OUTPUT" = "null" ]; then
            echo "‚ùå Falha ao extrair resposta da IA"
            exit 1
          fi
          
          echo "$REVIEW_OUTPUT" > review.txt
          echo "‚úÖ An√°lise conclu√≠da"
          
          echo "üìã Conte√∫do da an√°lise recebida:"
          echo "============================================"
          cat review.txt
          echo "============================================"

      - name: üí¨ Realizando coment√°rio no PR
        run: |
          TEMPLATE_PATH=".github/workflows/codeReview/comment_template_code-review.md"
          TITLE="${{ github.event.pull_request.title }}"
          STATUS=$(grep -Eo 'APROVADO|REPROVADO|INDETERMINADO' review.txt | head -n 1)

          if [ -z "$STATUS" ]; then
            STATUS="INDETERMINADO"
          fi

          # Gera o conte√∫do final substituindo os placeholders do template
          sed \
            -e "s|{{PR_NUMBER}}|${{ github.event.pull_request.number }}|g" \
            -e "s|{{PR_TITLE}}|$TITLE|g" \
            -e "s|{{HEAD}}|${{ github.head_ref }}|g" \
            -e "s|{{BASE}}|${{ github.base_ref }}|g" \
            -e "s|{{STATUS}}|$STATUS|g" \
            -e "/{{REVIEW_CONTENT}}/{
                  r review.txt
                  d
                }" \
            -e "s|{{DATE}}|$(TZ='America/Sao_Paulo' date '+%Y-%m-%d %H:%M:%S')|g" \
            "$TEMPLATE_PATH" > final_review.txt

          # Tenta comentar at√© 3 vezes para garantir
          for i in {1..3}; do
            gh pr comment ${{ github.event.pull_request.number }} --body-file final_review.txt && break
            echo "Tentativa $i falhou. Repetindo em 5 segundos..."
            sleep 5
          done

          echo "‚úÖ Coment√°rio adicionado com sucesso"

      - name: ‚ö° Valida√ß√£o do Resultado
        run: |
          if [ ! -f review.txt ]; then
            echo "‚ùå Arquivo review.txt n√£o encontrado. Falhando job."
            exit 1
          fi
          if grep -q "REPROVADO" review.txt; then
            echo "‚ùå REPROVADO - Problemas cr√≠ticos encontrados"
            exit 1
          elif grep -q "APROVADO" review.txt; then
            echo "‚úÖ APROVADO - C√≥digo pode prosseguir"
          else
            echo "‚ö†Ô∏è INDETERMINADO - Assumindo aprova√ß√£o"
          fi

      - name: üßπ Limpeza
        if: always()
        run: |
          rm -f diff.txt prompt_template.txt prompt.txt review.txt final_review.txt
          echo "‚úÖ Arquivos tempor√°rios removidos"